---
import Layout from "@/layouts/Layout.astro";
import { cn, fetchClient } from "@/lib/utils";
import { Debug } from "astro:components";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import type { Ticket, TicketUpdate } from "@/db/schema";
import { RequestDetailsLeft } from "@/components/requests/RequestDetailsLeft";
import { RequestDetailsRight } from "@/components/requests/RequestDetailsRight";

const { requestId } = Astro.params;

if (!requestId) {
  return Astro.redirect("/tickets");
}

if (!Astro.locals.user) {
  return Astro.redirect("/tickets");
}

let request;
try {
  const response = await fetchClient.api
    .request({ requestId: requestId as string })
    .get({
      headers: Object.fromEntries(Astro.request.headers.entries()),
    });

  console.log("resq", response.data.request.user.id);

  request = response.data.request;
} catch (error) {
  return Astro.redirect("/tickets?error=failed-to-load");
}

if (!request) {
  return Astro.redirect("/tickets?error=not-found");
}
---

<Layout>
  <div class="flex gap-6 max-w-7xl mx-auto">
    {/* Left side - Original request details (made narrower) */}
    <!-- <div class="w-[40%] border rounded-xl shrink-0">
      <div class="space-y-10">
        {/* Header Section */}
        <div class="px-6 py-4">
          <div class="flex items-center gap-4">
            <h1 class="text-2xl font-bold text-gray-900 tracking-tight">
              Request Details
            </h1>
            <Badge
              variant={request.status === "rejected"
                ? "destructive"
                : request.status === "submitted"
                  ? "default"
                  : "secondary"}
              className="capitalize"
            >
              {request.status}
            </Badge>
          </div>
          <p class="mt-2 text-sm text-gray-600">
            Reference ID: <span class="font-mono">{Astro.params.requestId}</span
            >
          </p>
        </div>

        {/* Status Progress */}
        <div class="bg-white shadow-sm rounded-xl overflow-hidden">
          <div class="px-8 py-6">
            {
              (() => {
                const statuses = ["submitted", "reviewed", "approved"];
                const currentIndex = statuses.indexOf(request.status);
                const progress =
                  request.status === "rejected"
                    ? 0
                    : Math.round((currentIndex / (statuses.length - 1)) * 100);

                return (
                  request.status !== "rejected" && <Progress value={progress} />
                );
              })()
            }
            <div class="flex justify-between mt-4">
              {
                ["submitted", "reviewed", "approved"].map((status) => (
                  <div class="text-sm font-medium text-gray-700 capitalize">
                    {status}
                  </div>
                ))
              }
            </div>
          </div>

          {/* Request Details */}
          <div class="border-t border-gray-200">
            <dl class="divide-y divide-gray-100">
              <div class="px-8 py-6">
                <dt class="text-sm font-semibold text-gray-900">
                  Request Type
                </dt>
                <dd class="mt-2 text-base text-gray-700 capitalize">
                  {request.type}
                </dd>
              </div>
              <div class="px-8 py-6">
                <dt class="text-sm font-semibold text-gray-900">Details</dt>
                <dd class="mt-2 text-base text-gray-700">
                  {request.details}
                </dd>
              </div>
              <div class="px-8 py-6">
                <dt class="text-sm font-semibold text-gray-900">ID Picture</dt>
                <dd class="mt-3">
                  <img
                    src={request.idPicture.url}
                    alt="Request Picture"
                    class="rounded-lg shadow-md max-h-[32rem] w-full object-cover"
                  />
                </dd>
              </div>
            </dl>
          </div>
        </div>
      </div>
    </div> -->

    {/* Right side - Timeline of updates */}
    <!-- <div class="flex-1 border rounded-xl p-6">
            <h2 class="text-2xl font-bold text-gray-900 mb-8">
                Request Timeline
            </h2>
            <div class="relative bg-slate-50 rounded-xl p-4 overflow-y-auto">
                {
                    requestLogs.map((log, index) => (
                        <div class="mb-8 flex gap-4">
                            {/* Timeline connector */}
                            <div class="relative flex-shrink-0">
                                <div
                                    class={cn(
                                        "h-4 w-4 rounded-full bg-primary mt-1.5",
                                        request.status === "rejected" &&
                                            "bg-red-500",
                                        request.status === "approved" &&
                                            "bg-green-500",
                                    )}
                                />
                                {index !== requestLogs.length - 1 && (
                                    <div class="absolute top-8 left-1/2 -translate-x-1/2 h-full w-0.5 bg-gray-200" />
                                )}
                            </div>

                            {/* Update content */}
                            <div
                                class={cn(
                                    "flex-1 bg-white rounded-lg border p-4 min-w-0",
                                    index === 0 &&
                                        request.status === "approved" &&
                                        "border-green-500 border-2",
                                )}
                            >
                                <div class="flex items-center justify-between mb-2 flex-wrap gap-2">
                                    <p class="font-semibold text-gray-900">
                                        Request Update
                                    </p>
                                    {log.type === "urgent" && (
                                        <p class="text-red-700 text-xs bg-red-100 px-2 py-1 rounded-full font-medium">
                                            Urgent Update
                                        </p>
                                    )}
                                    <time class="text-sm text-gray-500">
                                        {new Date(
                                            log.createdAt,
                                        ).toLocaleDateString()}
                                    </time>
                                </div>
                                <p class="text-gray-700">{log.message}</p>
                            </div>
                        </div>
                    ))
                }
            </div>
        </div> -->
    {/* Left side - Original request details (made narrower) */}
    <RequestDetailsLeft
      isAdmin={Astro.locals.user?.role === "admin"}
      requestId={requestId}
      client:only="react"
    />

    {/* Right side - Timeline of updates */}
    <RequestDetailsRight
      requestId={requestId}
      isAdmin={Astro.locals.user?.role === "admin"}
      userId={Astro.locals.user?.id!}
      client:only="react"
    />
  </div>
</Layout>
