---
import { Image } from "astro:assets";

const mockData = [
  {
    image: "https://placehold.co/600x400",
    alt: "Random image 1",
  },
  {
    image: "https://placehold.co/600x400",
    alt: "Random image 2",
  },
  {
    image: "https://placehold.co/600x400",
    alt: "Random image 3",
  },
  {
    image: "https://placehold.co/600x400",
    alt: "Random image 4",
  },
];

const data = Astro.props.data || mockData;
---

<div class="w-full flex justify-center items-center mb-6 bg-white">
  <div class="container mx-auto max-w-7xl px-8 py-4">
    <div class="relative overflow-hidden rounded-lg shadow-sm">
      <div
        class="flex transition-transform duration-300 w-full"
        id="carousel-container"
      >
        {
          data.map((item) => (
            <div class="w-full flex-shrink-0 min-w-full">
              <Image
                src={item.image}
                alt={item.alt || ""}
                inferSize
                loading="eager"
                class="w-full h-[40vh] object-cover"
              />
            </div>
          ))
        }
      </div>

      <button
        class="absolute left-4 top-1/2 -translate-y-1/2 bg-white p-3 rounded-full hover:bg-gray-50 transition-colors shadow-md text-gray-600 hover:text-gray-900"
        id="prev-btn"
        aria-label="Previous slide"
      >
        ←
      </button>
      <button
        class="absolute right-4 top-1/2 -translate-y-1/2 bg-white p-3 rounded-full hover:bg-gray-50 transition-colors shadow-md text-gray-600 hover:text-gray-900"
        id="next-btn"
        aria-label="Next slide"
      >
        →
      </button>
    </div>
  </div>
</div>

<script is:inline>
  const container = document.getElementById("carousel-container");
  const prevBtn = document.getElementById("prev-btn");
  const nextBtn = document.getElementById("next-btn");
  let currentIndex = 0;
  let autoRotateInterval;

  function updateCarousel() {
    if (!container) return;
    container.style.transform = `translateX(-${currentIndex * 100}%)`;
  }

  function goToNext() {
    const slides = container?.children.length || 0;
    if (currentIndex < slides - 1) {
      currentIndex++;
    } else {
      currentIndex = 0; // Loop back to first slide
    }
    updateCarousel();
  }

  function goToPrev() {
    const slides = container?.children.length || 0;
    if (currentIndex > 0) {
      currentIndex--;
    } else {
      currentIndex = slides - 1; // Loop to last slide
    }
    updateCarousel();
  }

  function startAutoRotate() {
    stopAutoRotate(); // Clear any existing interval
    autoRotateInterval = setInterval(goToNext, 5000); // Rotate every 5 seconds
  }

  function stopAutoRotate() {
    if (autoRotateInterval) {
      clearInterval(autoRotateInterval);
    }
  }

  // Event listeners
  prevBtn?.addEventListener("click", () => {
    goToPrev();
    stopAutoRotate(); // Stop auto-rotation when user interacts
  });

  nextBtn?.addEventListener("click", () => {
    goToNext();
    stopAutoRotate(); // Stop auto-rotation when user interacts
  });

  // Start auto-rotation
  startAutoRotate();

  // Optional: Pause auto-rotation when hovering over carousel
  container?.addEventListener("mouseenter", stopAutoRotate);
  container?.addEventListener("mouseleave", startAutoRotate);
</script>
